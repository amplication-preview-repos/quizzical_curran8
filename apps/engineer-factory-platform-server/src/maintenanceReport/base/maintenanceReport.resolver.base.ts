/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { MaintenanceReport } from "./MaintenanceReport";
import { MaintenanceReportCountArgs } from "./MaintenanceReportCountArgs";
import { MaintenanceReportFindManyArgs } from "./MaintenanceReportFindManyArgs";
import { MaintenanceReportFindUniqueArgs } from "./MaintenanceReportFindUniqueArgs";
import { DeleteMaintenanceReportArgs } from "./DeleteMaintenanceReportArgs";
import { MaintenanceReportService } from "../maintenanceReport.service";
@graphql.Resolver(() => MaintenanceReport)
export class MaintenanceReportResolverBase {
  constructor(protected readonly service: MaintenanceReportService) {}

  async _maintenanceReportsMeta(
    @graphql.Args() args: MaintenanceReportCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [MaintenanceReport])
  async maintenanceReports(
    @graphql.Args() args: MaintenanceReportFindManyArgs
  ): Promise<MaintenanceReport[]> {
    return this.service.maintenanceReports(args);
  }

  @graphql.Query(() => MaintenanceReport, { nullable: true })
  async maintenanceReport(
    @graphql.Args() args: MaintenanceReportFindUniqueArgs
  ): Promise<MaintenanceReport | null> {
    const result = await this.service.maintenanceReport(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => MaintenanceReport)
  async deleteMaintenanceReport(
    @graphql.Args() args: DeleteMaintenanceReportArgs
  ): Promise<MaintenanceReport | null> {
    try {
      return await this.service.deleteMaintenanceReport(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
