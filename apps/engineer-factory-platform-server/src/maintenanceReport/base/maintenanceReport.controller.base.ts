/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MaintenanceReportService } from "../maintenanceReport.service";
import { MaintenanceReportCreateInput } from "./MaintenanceReportCreateInput";
import { MaintenanceReport } from "./MaintenanceReport";
import { MaintenanceReportFindManyArgs } from "./MaintenanceReportFindManyArgs";
import { MaintenanceReportWhereUniqueInput } from "./MaintenanceReportWhereUniqueInput";
import { MaintenanceReportUpdateInput } from "./MaintenanceReportUpdateInput";

export class MaintenanceReportControllerBase {
  constructor(protected readonly service: MaintenanceReportService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MaintenanceReport })
  async createMaintenanceReport(
    @common.Body() data: MaintenanceReportCreateInput
  ): Promise<MaintenanceReport> {
    return await this.service.createMaintenanceReport({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [MaintenanceReport] })
  @ApiNestedQuery(MaintenanceReportFindManyArgs)
  async maintenanceReports(
    @common.Req() request: Request
  ): Promise<MaintenanceReport[]> {
    const args = plainToClass(MaintenanceReportFindManyArgs, request.query);
    return this.service.maintenanceReports({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MaintenanceReport })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async maintenanceReport(
    @common.Param() params: MaintenanceReportWhereUniqueInput
  ): Promise<MaintenanceReport | null> {
    const result = await this.service.maintenanceReport({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MaintenanceReport })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMaintenanceReport(
    @common.Param() params: MaintenanceReportWhereUniqueInput,
    @common.Body() data: MaintenanceReportUpdateInput
  ): Promise<MaintenanceReport | null> {
    try {
      return await this.service.updateMaintenanceReport({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MaintenanceReport })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMaintenanceReport(
    @common.Param() params: MaintenanceReportWhereUniqueInput
  ): Promise<MaintenanceReport | null> {
    try {
      return await this.service.deleteMaintenanceReport({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
