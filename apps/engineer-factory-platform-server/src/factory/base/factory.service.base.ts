/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Factory as PrismaFactory } from "@prisma/client";

export class FactoryServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.FactoryCountArgs, "select">): Promise<number> {
    return this.prisma.factory.count(args);
  }

  async factories(args: Prisma.FactoryFindManyArgs): Promise<PrismaFactory[]> {
    return this.prisma.factory.findMany(args);
  }
  async factory(
    args: Prisma.FactoryFindUniqueArgs
  ): Promise<PrismaFactory | null> {
    return this.prisma.factory.findUnique(args);
  }
  async createFactory(args: Prisma.FactoryCreateArgs): Promise<PrismaFactory> {
    return this.prisma.factory.create(args);
  }
  async updateFactory(args: Prisma.FactoryUpdateArgs): Promise<PrismaFactory> {
    return this.prisma.factory.update(args);
  }
  async deleteFactory(args: Prisma.FactoryDeleteArgs): Promise<PrismaFactory> {
    return this.prisma.factory.delete(args);
  }
}
